# 12: w + 15 => {16..24}
#     x in {-1..24}
#     z = z / 26
#     if x != w:


# 13: z in {2..10} before this step



[
    10, 12, 13, 13, 14,
    -2, 11, -15, -10, 10,
    -10, -4, -1, -1 
]
[
    0, 6, 4, 2, 9,
    1, 10, 6, 4, 6,
    3, 9, 15, 5
]

# 99999 (9)9(99)9 (9999)
# 0-4 w is 9, therefore need 4 after where w == (z % 26 + ...)

# 99999
# z = (0 * 26) + 9 = 9 (% = 9)
# z = (9 * 26) + 9 + 6 = 249 (1) (% = 15)
# z = (249 * 26) + 9 + 4 = 6487 (2) (% = 13) 
# z = (6487 * 26) + 9 + 2 = 168 673 (3) (% = 11)
# z = (168673 * 26) + 9 + 9 = 4 385 516 (4) (% = 18)

# onto second group of five
# 98
# z = ... + 9 + 1 = 4 385 526
# z = (... * 26) + 8 + 10 = 114 023 694 (5)
# z = 4 385 526 % 26 = 2 - 15 fix pula nu se poate -> 4 385 526 * 26 + 3 + 6 = 114 023 688 NOPE
# z = (... / 26) = 4 385 526 % 26 = 1 - 10 fix pula -> 

# (% = 11)
# (% = 19)
# (% = 15)
# (% = 15)
# (% = 19)

# 99999 (9)9(99)9 (9999)

#   0 
#   1
#   2
#   3
#   4

#  (5) ( %3 = [3, 11])
#   6
#  (7) ( %5 = [16, 24])
#  (8) ( %6 = [11, 19])
#   9

# (10) ( %8 = [11, 19])
# (11) ( %9 = [5, 13])
# (12) (%10 = [2, 10])
# (13) (%11 = [2, 10])

# 13 -> 11 -> 9 (5..10) (1..4)
# 10 -> 8 -> 6 (11..19) (1..9)
# 5 -> 3 (3..11) (1..9)

# after 12 -> z = x % 26 - 1 = 

# if i in [5,7,8,10,11,12,13]:
#     z = z / 26

# if (z % 26 + ...) != w:
#     z = (z * 26) + w + ...


# # other interpretation
# if v1[i] < 0:
#     z_mod = 0
#     n_mul -= 1 

# if (z_mod + v1[i] != w):
#     z_mod = w + v2[i]
#     n_mul += 1


'''
For 7 of the 14 digits, d = z // 26 % 26 + a
Which means that z // 26 % 26 + a must be between 1 and 9
Let's take (5) for example:
* z5 // 26 % 26 is going to be the same as z3 % 26 so
* z3 + a must be between 1 and 9 but
* we know z3 is going to be between 3 and 11
Therefore
3 in {1..9} leads to 5 in {1..9} OR 5 will be the same as 3

!! d5 = d3

Let's take (7):

'''